service: note-app
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  profile: shortlinker_v2
  lambdaHashingVersion: 20201221
  region: us-east-1
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:Query"
      Resource:
        - Fn::GetAtt: [ NotesTable, Arn ]
        - Fn::GetAtt: [ LinksTable, Arn ]
        - Fn::GetAtt: [ UsersTable, Arn ]
        - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:custom.linksTableName}/index/ShortUrlIndex'
        - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:custom.usersTableName}/index/EmailIndex'
        - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:custom.linksTableName}/index/UserIdIndex'

    - Effect: "Allow"
      Action:
        - "lambda:InvokeFunction"
      Resource: "arn:aws:lambda:us-east-1:870642761716:function:note-app-dev-deleteNote"
    - Effect: "Allow"
      Action:
        - "iam:PassRole"
      Resource: "arn:aws:iam::870642761716:role/RemoveLambdaRole"
    - Effect: "Allow"
      Action:
        - "scheduler:CreateSchedule"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "ses:SendEmail"
        - "ses:SendRawEmail"
      Resource: "arn:aws:ses:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:identity/lypovskyi@gmail.com"
    - Effect: "Allow"
      Action:
        - "sqs:SendMessage"
        - "sqs:ReceiveMessage"
      Resource:
        - "arn:aws:sqs:${self:provider.region}:870642761716:ShortLinkDeactivationQueue"
    - Effect: "Allow"
      Action:
        - "ses:VerifyEmailIdentity"
      Resource: "*"

  environment:
    REGION: ${self:provider.region}
    BASE_URL: !Sub "https://${ApiGatewayRestApi}.execute-api.${aws:region}.amazonaws.com/${sls:stage}"
    NOTES_TABLE: ${self:custom.notesTableName}
    LINKS_TABLE: ${self:custom.linksTableName}
    USERS_TABLE: ${self:custom.usersTableName}
    JWT_SECRET: ${self:custom.JWT_SECRET}
    LINK_DEACTIVATION_QUEUE_URL: !Ref ShortLinkDeactivationQueue

functions:
  authorizer:
    handler: src/lambdas/authorizer.handler
  createNote:
    handler: src/lambdas/createNote.handler
    events:
      - http:
          path: notes
          method: post
          cors: true
  deleteNote:
    handler: src/lambdas/deleteNote.handler
    events:
      - http:
          path: notes/{noteId}
          method: delete
          cors: true
  createSchedule:
    handler: src/lambdas/createSchedule.handler
    events:
      - http:
          path: schedule
          method: post
          cors: true
  createLink:
    handler: src/lambdas/createLink.handler
    events:
      - http:
          path: links
          method: post
          cors: true
          authorizer:
            name: authorizer
            type: TOKEN
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 3600
  linkDeactivation:
    handler: src/lambdas/linkDeactivation.handler
  getLinkFromShortUrl:
    handler: src/lambdas/getLinkFromShortUrl.handler
    events:
      - http:
          path: /{linkId}
          method: get
  register:
    handler: src/lambdas/register.handler
    events:
      - http:
          path: register
          method: post
  login:
    handler: src/lambdas/login.handler
    events:
      - http:
          path: login
          method: post
  getLinksByUser:
    handler: src/lambdas/getLinksByUser.handler
    events:
      - http:
          path: links
          method: get
          cors: true
          authorizer:
            name: authorizer
            type: TOKEN
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 3600
  deactivateLink:
    handler: src/lambdas/deactivateLink.handler
    events:
      - http:
          path: links/{linkId}
          method: delete
          authorizer:
            name: authorizer
            type: TOKEN
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 3600

  sendEmailNotification:
    handler: src/lambdas/sendEmailNotification.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ShortLinkDeactivationQueue
              - Arn

resources:
  Resources:
    NotesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.notesTableName}
        AttributeDefinitions:
          - AttributeName: noteId
            AttributeType: S
        KeySchema:
          - AttributeName: noteId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    LinksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.linksTableName}
        AttributeDefinitions:
          - AttributeName: linkId
            AttributeType: S
          - AttributeName: shortUrl
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: linkId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: ShortUrlIndex
            KeySchema:
              - AttributeName: shortUrl
                KeyType: HASH
            Projection:
              ProjectionType: "ALL"
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: "ALL"

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTableName}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: "ALL"

    ShortLinkDeactivationQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ShortLinkDeactivationQueue

    RemoveLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: RemoveLambdaRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
                  - "events.amazonaws.com"
                  - "scheduler.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: LambdaSchedulerFunction
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: "Allow"
                  Action:
                    - "scheduler:CreateSchedule"
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - "lambda:InvokeFunction"
                  Resource:
                  - "arn:aws:lambda:us-east-1:870642761716:function:note-app-dev-deleteNote:*"
                  - "arn:aws:lambda:us-east-1:870642761716:function:note-app-dev-deleteNote"
                  - "arn:aws:lambda:us-east-1:870642761716:function:note-app-dev-linkDeactivation:*"
                  - "arn:aws:lambda:us-east-1:870642761716:function:note-app-dev-linkDeactivation"

plugins:
  - serverless-esbuild

custom:
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    exclude: [ 'aws-sdk' ]
    target: 'node18'
    define: { 'require.resolve': undefined }
    platform: 'node'
  notesTableName: NotesTable
  linksTableName: ShortLinksTable
  usersTableName: UsersLinksOwnerTable
  JWT_SECRET: SECRET
